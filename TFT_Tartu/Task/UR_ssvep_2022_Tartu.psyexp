<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'sound': '[1, 0]', 'stimDur': '1.5', 'cueDur': '2', 'participant': '999', 'medium gabor': '[0, 1]', 'high': '15', 'rotate positions': '[1, 0]', 'flickering cue': '[1, 0]', 'low': '4', 'looming fixation': '[1, 0]', 'intro': '[1, 0]', 'jumper': '[1, 0]', 'EEG': '[1, 0]', 'Chemicum': '[0, 1]'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="OSF Project ID" updates="None" val="" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="False" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="deg" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1600, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="URS_22_Tartu" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="pred_event">
      <CodeComponent name="code_prediction">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="xys = []&amp;#10;fliCue = 0 # need it? cft = 0&amp;#10;cueText = '?'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: start stim&amp;#10;triggers(expInfo, cueText, 2,0)&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 0&amp;#10;&amp;#10;# prediction duration&amp;#10;# shuffle(pred_durs)&amp;#10;# pred_duration = int(pred_durs[0])&amp;#10;&amp;#10;# timing tests&amp;#10;lastT = t &amp;#10;#print('prediction')&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;#print(frameDuration)&amp;#10;&amp;#10;# TRIGGER: start prediction (show on screen)&amp;#10;# triggers(expInfo, cueText, 2,0)&amp;#10;&amp;#10;# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;# present the fixation&amp;#10;if int(expInfo[ 'looming fixation' ]):&amp;#10;    fixSize = (t/8, t/8)&amp;#10;else:&amp;#10;    fixSize = (0.3, 0.3)&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN, low_freq, high_freq, annulusOri,cueText, fliCue,0,pred_duration)&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('prediction refR', refR) # write average srate to the file" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_prediction" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="fix_prediction">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="2" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="50" valType="int"/>
        <Param name="name" updates="None" val="fix_prediction" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="set every frame" val="fixSize" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="pred_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
    </Routine>
    <Routine name="pause">
      <CodeComponent name="code_pause">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="pauseCounter = 0&amp;#10;&amp;#10;pauseMsg = ' '&amp;#10;&amp;#10;pauseMsgText = visual.TextStim(win, pauseMsg,&amp;#10;pos=(0, -5.5), units='deg',color=[1,1,1], height = 1, &amp;#10;bold=False, colorSpace='rgb', italic = True, wrapWidth=35)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# trigger 10 is pause&amp;#10;trigRGB = [rgbValsCondition[1], rgbValsRoutine[0], rgbValsResp[0]]&amp;#10;msgTrigger = str(trigValOutRed[1]+trigValOutGreen[0]+trigValOutBlue[0])&amp;#10;trigger.fillColor = trigRGB&amp;#10;&amp;#10;&amp;#10;if trials.thisN &gt; 2:&amp;#10;# only pause for a rest on every 30th trial: &amp;#10;    if  trials.thisN %  30  !=  0: # &amp;#10;        continueRoutine =  False # so don’t run the pause routine this time.&amp;#10;    else:&amp;#10;        pauseCounter = pauseCounter + 1&amp;#10;else:&amp;#10;    continueRoutine =  False&amp;#10;&amp;#10;&amp;#10;&amp;#10;pauseTxt = &quot;This is a pause. Press any key to continue...\n\&amp;#10;\nPercent correct: &quot;&amp;#10;&amp;#10;pauseTxt2 = '\n\nEstimated time until the end of the experiment: '&amp;#10;&amp;#10;soundNotPlayed = 1&amp;#10;currentTime = core.getTime()&amp;#10;timePassed = currentTime - expStartTime&amp;#10;&amp;#10;trialRatio = nTrials/(trials.thisN+1)&amp;#10;expDuration = trialRatio * timePassed&amp;#10;timeLeft = round((expDuration - timePassed)/60)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;if int(pauseCounter) == 1:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;\nThe first recording of a human electroencephalography is often attributed to a German psychiatrist Hans Berger (around 1920s). He is also well known for his discovery of the alpha wave or sometimes called “Breger wave”. What is less known, is how he got involved with EEG in the first place. To be continued…'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 2:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThe story goes that Hans Berger got interested in EEG because he believed to have experienced spontaneous telepathy with her sister. He reasoned that if it was truly telepathy, recording the electrical activity of the brain might help to bring light to the mechanisms of it. Maybe this belief is to be blamed or something else, but his recordings of the alpha wave were left relatively unnoticed by other investigators for another decade or so. To be continued…'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 3:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nHans Berger’s work was later picked up by English investigator, Edgar Douglas Adrian, who was awarded for the Nobel prize with another investigator Sir Charles Sherrington, for their discoveries regarding the functions of neurons. One of the things that they investigated was all-or-nothing principle in the nerve cells.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 4:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThe same guy, Edgar Douglas Adrian, who replicated Hans Berger\'s findings, was also involved in another matter close to the hearts of the researchers involved in the current experiment. He described something that in today’s terms would be called &quot;steady-state visual evoked potentials&quot;, which is a fancy term used to describe brains frequency specific response to a visual flicker.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 5:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nResearchers are using the Fourier transformation to analyse brain responses to the flickering stimuli, but also in more standard filtering. This method dates back to 19th century French mathematician, Jean-Baptiste Joseph Fourier. He came up with an idea that any signal could be represented as a collection of sinusoidal waves without losing any information. Or as somebody quite nicely but it, Fourier transform tells you what frequencies are present in your signal and in what proportions.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 6:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nFourier transformation, that at the time of Jean-Baptiste, attracted attention by few mathematics enthusiasts, is now widely used method for analysing signals across the disciplines, sprinkling from genetics to quantum mechanics, but has also found it’s way into practical applications and gadgets that we use every day.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 7:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThere are a huge number of nerve cells in the brain. According to best of our estimates, this number is around 86 billion (give or take 8 billion). It is often said, to bring that number into perspective, that this is about the same as the number of the stars in the Milky Way galaxy. Latest estimates taught us, that there might be up to 400 billion stars in our galaxy. So lets try to update the popular statement. There are up to as many stars in the Milky Way galaxy as there are nerve cells in the brains of you and your three friends combined. Sounds catchy, doesn\'t it? If you did the math, you found that there is a little miscalculation. I\'d take it as a compliment :)'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 8:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nWelcome to the department of psychology at the University of York! The department holds it’s roots in the year 1974 when Founding Head of Department Peter Venables appointed the first lecturers. He helped to pioneer the application of physiological measures to psychological problems, paving the way into the top class research in biological basis of psychology and behaviour. '&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_pause" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_pause">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="text_pause" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 5)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pauseTxt + str(int(np.mean(correctResps)*100)) + str(' %') + pauseTxt2 + str(timeLeft) + str(' minutes')" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="35" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="any_key_end_pause">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="any_key_end_pause" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="intro_staires">
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is just a test..." valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="ITI">
      <CodeComponent name="code_fix">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="trialCounter = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if int(expInfo[ 'EEG' ]):&amp;#10;    port.setData(0)&amp;#10;# trig Tartu&amp;#10;&amp;#10;trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['iti']&amp;#10;&amp;#10;# set fixation duration randomly 0.5,1 or 1.5 s&amp;#10;shuffle(fix_durs)&amp;#10;fixation_duration = fix_durs[0]&amp;#10;&amp;#10;#give a random orientation to target gratings&amp;#10;orients = randint(1,360) # randint(1,360)&amp;#10;annulusOri = orients + 90# 0 # this variable can be used to change the background &amp;#10;# grating orientations on each trial&amp;#10;fliCue = 0 # if this is set zero no fill-in will be presented&amp;#10;&amp;#10;trialCounter += 1&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = 0 &amp;#10;#print('ITI')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;# Tartu&amp;#10;sendTrigger(t, trigN, expInfo['EEG'])&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN,low_freq, high_freq, annulusOri, cueText, fliCue,0,fixation_duration)&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#win.mouseVisible = False&amp;#10;# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('iti refR', refR) # write average srate to the file&amp;#10;thisExp.addData('iti dur', fixation_duration)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_fix" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="ellips_fix">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0.8,0.8,0.8]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="ellips_fix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(4.5, 1.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="fixation_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
    </Routine>
    <Routine name="main_intro">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="core.rush(True, realtime=True)&amp;#10;&amp;#10;np.random.seed(int(expInfo[ 'participant'])) # this needs to be tested&amp;#10;&amp;#10;stairesN = 65 # in order to have equal number of repetitions in each condition keep it divisible by 4&amp;#10;&amp;#10;# srate == screen refresh&amp;#10;srate = int(win.getActualFrameRate())# get the actual monitor fRate&amp;#10;print('estimate frame rate: ' + str(srate))&amp;#10;&amp;#10;# save the selected frequencies to a variable&amp;#10;high_freq = float(expInfo[ 'high' ])&amp;#10;low_freq = float(expInfo[ 'low' ])&amp;#10;&amp;#10;# SET ROUTINE DURATIONS FOR ITI, CUE, PRED, STIM, FB&amp;#10;&amp;#10;cueDur = float(expInfo['cueDur']) # 2 s&amp;#10;&amp;#10;# PERDICTION and ITI duration (based on screen refresh rate and &amp;#10;# least common multiplier&amp;#10;fix_durs = [0.5, 1, 1.5] # from 0.5 to 1.5 s&amp;#10;pred_durs = [2,2.5,3,3.5,4,4.5,5,5.5,6] # ,960 last not included&amp;#10;lcm_frex = 0.5&amp;#10;&amp;#10;&amp;#10;# predictionDur = int(2*srate)&amp;#10;&amp;#10;# STIM duration &amp;#10;stim_duration = float(expInfo['stimDur'])# 1+lcm_frex&amp;#10;&amp;#10;# feedback duration&amp;#10;fbDur=1 # 1 s&amp;#10;&amp;#10;&amp;#10;# select random orientation for target gratings (different orientation for each)&amp;#10;orients =  randint(1,360)&amp;#10;annulusOri = orients + 90&amp;#10;&amp;#10;# set etalon opacity &amp;#10;cont1 = 0.4&amp;#10;# equal opacity for the second grating at the beginning of the experiment&amp;#10;cont2 = 0.4&amp;#10;# default opacities &amp;#10;conts_default = [cont1, cont1] # opas_default will remain the same throughout the experiment&amp;#10;conts = [cont1, cont2] # one of the elements in opas will change each trial (the value of &amp;#10;# 'level' from the staircase will be added to it)&amp;#10;&amp;#10;# size of the grating in degrees&amp;#10;gabor_size = 2&amp;#10;# gratings midpoint distance from the centre (radius of the circle in degrees)&amp;#10;gabor_dist = 5&amp;#10;# default sizes&amp;#10;gsizes_default = [(gabor_size, gabor_size), (gabor_size, gabor_size)]&amp;#10;&amp;#10;# number of gratings in each arrey&amp;#10;distractorN = 2&amp;#10;contAnnulus = 0.4 # 0.5 # 0.7/2 #0.5 # opacity of the annulus is hard coded to 0.5 (0.4*0.5)&amp;#10;opaTarget = 0.5# 0.625 # 0.875/2#0.625 (0.5*0.4)&amp;#10;&amp;#10;&amp;#10;# build an arrey of gratings. this information will be sent&amp;#10;# to the graphics card for better timing&amp;#10;&amp;#10;# these are the target gratings drawn in the STIM routine&amp;#10;# colors, orientations, positions and opacities will be changing on each iteration.&amp;#10;# everything else remains as it is defined here.&amp;#10;# color variable will be used to give the gratings a desired flickering rate on each trial.&amp;#10;gabors = visual.ElementArrayStim(win, units='deg', fieldPos=(0.0, 0.0), &amp;#10;fieldSize=(20, 20), fieldShape='circle', nElements=2, &amp;#10;sizes=gsizes_default, xys=[(-gabor_dist,0),(gabor_dist,0)], colors=([0.5, 0.5, 0.5]) , &amp;#10;colorSpace='rgb', opacities=opaTarget, oris=orients, sfs=2.0, contrs=conts_default, &amp;#10;phases=0, elementTex='sin',elementMask='circle', texRes=128, &amp;#10;interpolate=True, name=None, autoLog=None, maskParams=None)&amp;#10;&amp;#10;distractors = visual.ElementArrayStim(win, units='deg', fieldPos=(0.0, 0.0), &amp;#10;fieldSize=(20, 20), fieldShape='circle', nElements=2, &amp;#10;sizes=gsizes_default, xys=[(-gabor_dist,0),(gabor_dist,0)], colors=([0.5, 0.5, 0.5]) , &amp;#10;colorSpace='rgb', opacities=opaTarget, oris=orients, sfs=2.0, contrs=conts_default, &amp;#10;phases=0, elementTex='sin',elementMask='circle', texRes=128, &amp;#10;interpolate=True, name=None, autoLog=None, maskParams=None)&amp;#10;&amp;#10;# these are the large gratings drawn in all the routines&amp;#10;# colors will be changing on each iteration.&amp;#10;# everything else remains as it is defined here.&amp;#10;# color variable will be used to give the two overlapping gratings different flickering rates.&amp;#10;# note: the opacities of the lower and top gratings are 1 and 0.5 respectively.&amp;#10;# LARGE &amp;#10;gabors_large = visual.ElementArrayStim(win, units='deg', fieldPos=(0.0, 0.0), &amp;#10;fieldSize=(30, 30), fieldShape='circle', nElements=distractorN, &amp;#10;sizes=20, xys=[(0,0), (0,0)], colors=([0.5, 0.5, 0.5]) , &amp;#10;colorSpace='rgb', opacities=[1,0.5], oris=annulusOri, sfs=2.0, contrs=contAnnulus, &amp;#10;phases=0, elementTex='sin',elementMask='circle', texRes=128,&amp;#10;interpolate=True, name=None, autoLog=None, maskParams=None)&amp;#10;&amp;#10;&amp;#10;# SMALL&amp;#10;gabors_small = visual.ElementArrayStim(win, units='deg', fieldPos=(0.0, 0.0), &amp;#10;fieldSize=(30, 30), fieldShape='circle', nElements=distractorN, &amp;#10;sizes=7.5, xys=[(0,0), (0,0)], colors=([0.5, 0.5, 0.5]) , &amp;#10;colorSpace='rgb', opacities=[1, 0.5], oris=annulusOri, sfs=2.0, contrs=contAnnulus, &amp;#10;phases=0, elementTex='sin',elementMask='circle', texRes=128, &amp;#10;interpolate=True, name=None, autoLog=None, maskParams=None)&amp;#10;&amp;#10;# circle used to cover two larger gabors&amp;#10;circle = visual.Circle(&amp;#10;win=win,&amp;#10;units=&quot;deg&quot;,&amp;#10;radius=6.5,&amp;#10;fillColor=[0, 0, 0],&amp;#10;lineColor=None,&amp;#10;edges=99&amp;#10;)&amp;#10;&amp;#10;# gabor(s) used as fill-in's&amp;#10;# contrast of the first grating will be set to zero if HIGH/LOW CUE&amp;#10;gaborsMedium = visual.ElementArrayStim(win, units='deg', fieldPos=(0.0, 0.0), &amp;#10;fieldSize=(30, 30), fieldShape='circle', nElements=2, &amp;#10;sizes=13, xys=[(0,0), (0,0)], colors=([0.5, 0.5, 0.5]) , &amp;#10;colorSpace='rgb', opacities=[1, 0.5], oris=orients, sfs=2.0, contrs=contAnnulus, &amp;#10;phases=0, elementTex='sin',elementMask='circle', texRes=128, &amp;#10;interpolate=True, name=None, autoLog=None, maskParams=None)&amp;#10;&amp;#10;# this is used to present the RGB trigger on screen&amp;#10;# fillColor value will be changed based on the trial information&amp;#10;#trigger = visual.Rect(win, units = 'norm', width=0.01, height=0.01, &amp;#10;#autoLog=None, fillColor=[0, 0, 0], fillColorSpace='rgb255', lineColor=None, pos = [-1,1],&amp;#10;#opacity = 1)&amp;#10;&amp;#10;# a function to draw the large gabors and fill-in on screen&amp;#10;def drawGabors(expInfo,t,frameN, low_freq, high_freq, annulusOri, &amp;#10;                 cueText, fliCue,t1,t2):&amp;#10;    &amp;#10;    &amp;#10;    if expInfo['flickering cue'] == '1':&amp;#10;        flickering = True&amp;#10;    else:&amp;#10;        flickering = False  # binary&amp;#10;    &amp;#10;    &amp;#10;    if int(expInfo[ 'jumper' ]):&amp;#10;        # change the stimulus colour based on the desired frequency&amp;#10;        # where t is time, trial_freq is the frequency&amp;#10;        sine_high = sin(2*pi*(high_freq)*t)&amp;#10;        stimCol_high = [sine_high,sine_high,sine_high]# [x * sine_high for x in col]&amp;#10;        sine_low = sin(2*pi*(low_freq)*t)&amp;#10;        stimCol_low = [sine_low,sine_low,sine_low]#[x * sine_low for x in col]&amp;#10;        # update gratings (original)&amp;#10;        gabors_large.colors=[stimCol_low, stimCol_high]&amp;#10;        gabors_small.colors=[stimCol_low, stimCol_high]&amp;#10;        # set positions&amp;#10;        gabors_large.oris=annulusOri&amp;#10;        gabors_small.oris=annulusOri&amp;#10;        # set contrast&amp;#10;        gabors_large.contrs=contAnnulus&amp;#10;        gabors_small.contrs=contAnnulus&amp;#10;        gabors_large.draw()&amp;#10;        if flickering and fliCue == 1 and t &gt;= t1 and t &lt;= t2:&amp;#10;            if cueText == 'kiire':&amp;#10;                gaborsMedium.colors = stimCol_high&amp;#10;                gaborsMedium.contrs = [0, contAnnulus]&amp;#10;            elif cueText == 'aeglane':&amp;#10;                gaborsMedium.colors = stimCol_low&amp;#10;                gaborsMedium.contrs = [0, contAnnulus]&amp;#10;            elif cueText == '?':&amp;#10;                gaborsMedium.colors = [stimCol_low, stimCol_high]&amp;#10;                gaborsMedium.contrs = [contAnnulus, contAnnulus]&amp;#10;#            # TRIGGER: start prediction (show on screen)&amp;#10;#            triggers(expInfo, cueText, 2, 1)&amp;#10;            gaborsMedium.oris = annulusOri+90&amp;#10;            gaborsMedium.draw()&amp;#10;        elif int(expInfo[ 'medium gabor' ]):&amp;#10;            gaborsMedium.oris = annulusOri&amp;#10;            gaborsMedium.contrs = [contAnnulus, 0]&amp;#10;            gaborsMedium.draw()&amp;#10;        else:&amp;#10;            circle.draw()&amp;#10;        gabors_small.draw()&amp;#10;&amp;#10;# EEG Set-up&amp;#10;&amp;#10;if expInfo['EEG'] == '1':&amp;#10;    print('set port')&amp;#10;    from psychopy import parallel&amp;#10;    if expInfo['Chemicum'] == '1':&amp;#10;        port = parallel.ParallelPort(address=0x378)&amp;#10;    else:&amp;#10;        port = parallel.ParallelPort(address=0x3FF8)&amp;#10;        port.setData(0)&amp;#10;&amp;#10;trigdic = {'kiire': '11', 'aeglane': '10', '?': '01', 'high': '1', 'low': '0', 'iti': '000', 'cue': '100', 'prediction': '010', 'stimStart': '001', 'respInCorr': '110', 'respCorr': '011', 'pause': '111', 'question': '101'}&amp;#10;trigN = str()&amp;#10;&amp;#10;def sendTrigger(t, trigN, EEG):&amp;#10;    if EEG == '1':&amp;#10;        if t &lt; 0.05 and t &gt; 0:  # send trigger for 50 ms and do not send the trigger before next flip time&amp;#10;            port.setData(int(trigN, 2))&amp;#10;        else:&amp;#10;            pass&amp;#10;            port.setData(0)&amp;#10;&amp;#10;# question&amp;#10;&amp;#10;#slider = visual.Slider(win=win, name='slider',&amp;#10;#    startValue=None, size=(30, 1), pos=(0, -0.4), units=None,&amp;#10;#    labels=['kindlasti aeglane','?','kindlasti kiire'], ticks=(-100,0,100), granularity=0.0,&amp;#10;#    style='slider', styleTweaks=(), opacity=None,&amp;#10;#    color='Black', fillColor='Red', borderColor='Black', colorSpace='rgb',&amp;#10;#    font='Open Sans', labelHeight=1.0,&amp;#10;#    flip=False, depth=-1, readOnly=False)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="from psychopy import sound&amp;#10;win.mouseVisible = False&amp;#10;&amp;#10;clock = core.Clock()&amp;#10;# these are just for presenting instroctions and are not commented at the moment&amp;#10;# same appliest to the whole introduction routine (also &quot;each frame&quot; and &quot;end routine&quot;) &amp;#10;&amp;#10;introTextSize = 1&amp;#10;introVol = 0&amp;#10;introCounter = 0&amp;#10;introMSG = []&amp;#10;counter = 0&amp;#10;musicStart = 99&amp;#10;contIntro = conts_default&amp;#10;contIntroBlip = [cont1, 1]&amp;#10;shuffle(contIntroBlip)&amp;#10;stimCol=0&amp;#10;posYtext = 0&amp;#10;introFrex = float(expInfo['low'])&amp;#10;distrFrex = float(expInfo['high'])&amp;#10;line = '-'&amp;#10;sine = 0&amp;#10;counterGo = 0&amp;#10;introTxtCol = 'black'&amp;#10;fill_in = 0&amp;#10;keyDown = 0&amp;#10;&amp;#10;introTxt = 'Kui Sa pole kindel, millises võres muutus toimus, siis lähtu kõhutundest. Ilmselt märkasid, et võred ei seisa paigal, vaid vilguvad. Võredel on kaks kiirust. Vajuta klaviatuuril \&quot;a\&quot; või \&quot;k\&quot; tähte, et ekraanile esitatud võrede kiirust vahetada.'&amp;#10;&amp;#10;introTxt2 = 'Sellel lehel näed nelja väiksemat võret, mis paiknevad suuremate võrede sees olevas hallikas alas. Samamoodi kuvatakse võresid ka katse ajal.'&amp;#10;&amp;#10;introTxt2_1 = 'Vastamiseks on 3 sekundit. \n\n\&amp;#10;Vastuse registreerumisest annab märku helitoon. Õige vastuse korral mängib programm kõrget ja vale vastuse korral madalat heli. Kõrge ja madala heli võrdlemiseks vajuta kordamööda tagasi ja edasi nooleklahve klaviatuuril.'&amp;#10;&amp;#10;pressLeft = visual.TextStim(win, &quot;Eelmine&quot;, &amp;#10;pos=(-0.7, -0.7), units='norm',color=[-1,-1,-1], height = 0.05, &amp;#10;bold=True,colorSpace='rgb')&amp;#10;&amp;#10;pressRight = visual.TextStim(win, &quot;Järgmine&quot;,&amp;#10;pos=(+0.7, -0.7), units='norm',color=[-1,-1,-1], height = 0.05, &amp;#10;bold=True, colorSpace='rgb')&amp;#10;&amp;#10;letterh = 0.86&amp;#10;introText = visual.TextStim(win, introTxt,&amp;#10;pos=(0, -5.5), units='deg',color=[-1,-1,-1], height = letterh, &amp;#10;bold=False, colorSpace='rgb',wrapWidth=35)&amp;#10;&amp;#10;introText2 = visual.TextStim(win, introTxt2,&amp;#10;pos=(-15.5, 0), units='deg',color=[-1,-1,-1], height = letterh, &amp;#10;bold=False, colorSpace='rgb',wrapWidth=10)&amp;#10;&amp;#10;introText2_1 = visual.TextStim(win, introTxt2_1,&amp;#10;pos=(15.5, 0), units='deg',color=[-1,-1,-1], height = letterh, &amp;#10;bold=False, colorSpace='rgb',wrapWidth=10)&amp;#10;&amp;#10;go = visual.TextStim(win, '',&amp;#10;pos=(0, 0), units='deg',color=introTxtCol, height = 0.6, &amp;#10;bold=False,  colorSpace='rgb')&amp;#10;&amp;#10;# circle used to cover two larger gabors&amp;#10;introDot = visual.Circle(&amp;#10;win=win,&amp;#10;units=&quot;deg&quot;,&amp;#10;radius=.15,&amp;#10;fillColor=[0.25, 0.25, 0.25],&amp;#10;lineColor=None,&amp;#10;edges=99&amp;#10;)&amp;#10;&amp;#10;introCue = visual.Polygon(win, edges=99, units = 'deg' , pos = (0,0),&amp;#10;size = (3, 1.5), fillColor = (0.1,0.1,0.1), lineColor = None)&amp;#10;&amp;#10;&amp;#10;# rotate gratings around the center if 'rotate positions' set 1&amp;#10;if int(expInfo[ 'rotate positions' ]) == 1:&amp;#10;    center = [0,0] # relative center&amp;#10;    pos1 = [0,5] # coordinates for the first point&amp;#10;    pos2 = [0,-5] # coordinates for the second point&amp;#10;    pos1m = [center, pos1] # this will be multiplied with the rotation matrix&amp;#10;    pos2m = [center, pos2] # this will be multiplied with the rotation matrix&amp;#10;    angle = randint(45,135) # take random integer from 45 to 135&amp;#10;    theta = np.radians(angle) # convert to radians&amp;#10;    c, s = np.cos(theta), np.sin(theta)&amp;#10;    R = np.array(((c,-s), (s, c))) # rotation matrix&amp;#10;    pos1 = np.matmul(pos1m, R) # multiply first vector with rotation matrix&amp;#10;    pos2 = np.matmul(pos2m, R) # multiply second vector with rotation matrix&amp;#10;    if angle &lt; 90:&amp;#10;        angle2 = randint(30,60)+angle&amp;#10;    else:&amp;#10;        angle2 = randint(-60,-30)+angle&amp;#10;    theta2 = np.radians(angle2)&amp;#10;    c2, s2 = np.cos(theta2), np.sin(theta2)&amp;#10;    R2 = np.array(((c2,-s2), (s2, c2))) # rotation matrix&amp;#10;    pos12 = np.matmul(pos1m, R2) # multiply first vector with rotation matrix&amp;#10;    pos22 = np.matmul(pos2m, R2) # multiply second vector with rotation matrix&amp;#10;    distractors.xys = [pos12[1], pos22[1]] # [(0, 5), (0, -5)] # " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys_resp_i = event.getKeys()&amp;#10;&amp;#10;if int(expInfo[ 'intro' ]):&amp;#10;    posYtext = 0&amp;#10;    if int(introCounter) == 0:&amp;#10;        introMSG = 'Tere tulemast! Täname, et otsustasid enda aega ja energiat meie uurimistöösse investeerida. Selleks hetkeks oled suure tõenäosusega juba läbi teinud tüütuvõitu elektroodide paigaldamise protseduuri.\n\&amp;#10;        \nAitäh kannatlikkuse eest!'&amp;#10;    elif int(introCounter) == 1:&amp;#10;        gabors.xys=[(-gabor_dist,-1),(gabor_dist,-1)]&amp;#10;        introMSG = 'Katses esitatakse ekraanile neli väikest võret ja üks neist võredest muudab lühikeseks ajahetkeks kontrasti. Sinu ülesandeks on vasaku või parema nooleklahviga märku anda, kas muutus toimus vastavalt vasakul või paremal pool ekraani. Kui vajutad praegu klaviatuuril alla noolt, siis ilmuvad ekraanile katses kasutatavad võred. Üles ja alla noolt kordamööda vajutades näed ka, kuidas kontrasti muutus katses välja nägema hakkab. Pane tähele, et katse jooksul võib muutus olla vaevu märgatav ja seetõttu on hea, kui prooviksid tähelepanu kogu katse vältel katse juures hoida.'&amp;#10;        posYtext = 5.5&amp;#10;        if 'down' in keys_resp_i: &amp;#10;            keyDown = 1&amp;#10;            gabors.colors=stimCol&amp;#10;            gabors.draw()&amp;#10;        elif keyDown:&amp;#10;            gabors.colors=stimCol&amp;#10;            gabors.draw()&amp;#10;        introText.draw()&amp;#10;# target gratings will be presented if 'up' or 'down' pressed on keyboard&amp;#10;    elif int(introCounter) == 2:&amp;#10;        introMSG = ''&amp;#10;        introText2.draw()&amp;#10;        introText2_1.draw()&amp;#10;        drawGabors(expInfo,t, frameN,low_freq, high_freq, annulusOri, 'cueText', fill_in,t,t+1)&amp;#10;        gabors.colors=stimCol&amp;#10;        gabors.xys = [pos1[1], pos2[1]]&amp;#10;        distractors.colors=stimCol2&amp;#10;        distractors.draw()&amp;#10;        gabors.draw()&amp;#10;        introDot.draw()&amp;#10;    elif int(introCounter) == 3:&amp;#10;        win.mouseVisible = False&amp;#10;        introMSG  = 'Me ei ütle Sulle kummal ekraanipoolel muutus toimub, sest see teeks katse liiga lihtsaks ja läheks ka vastuollu meie uurimiseesmärkidega. Selle asemele vihjame hoopis, kas muutus toimub kiiresti või aeglaselt vilkuvate võrede hulgas. Kui tahaksid meenutada, kuidas kiiresti ja aeglaselt vilkuvad võred välja nägidki, siis liigu tagasi noolega esimesele slaidile, et kiirusi uue pilguga vaadata.\n\&amp;#10;        \nKatses on kolme tüüpi vihjeid. Kui vihjena kuvatakse sõna „kiire“, siis tähendab see, et muutus toimub kiiresti vilkuvate võrede hulgas. Sõna „aeglane“ omakorda aga seda, et muutus toimub aeglaselt vilkuvate võrede hulgas. Kui ekraanile ilmub küsimärk, siis tähendab see, et muutus võib toimuda nii kiiresti, kui aeglaselt vilkuvate võrede hulgas. Pärast iga vihjet on lühikene ettevalmistusperiood, mis annab Sulle võimaluse enda tähelepanu ennetavalt vihjatud vilkumissagedusele viia. See on oluline, sest meid huvitab, kuidas tähelepanu tahtlik suunamine Sinu soorituses ja ajuaktiivsuses kajastub. Palume Sul hoida silmad läbivalt ekraani keskel (va pauside ajal). Et pilk uitama ei läheks, oleme ekraani keskele paigutanud pisikese täpi, mille mõõtmed ooteperioodi ajal sujuvalt kasvavad.'&amp;#10;    elif int(introCounter) == 4:&amp;#10;        win.mouseVisible = True&amp;#10;        posYtext = 8&amp;#10;        introMSG  = 'Et vihjete jälgimine meelest ei läheks, siis küsitakse aeg-ajalt, millist silti viimati esitatud vihje kandis. Hetkel ootab programm, et vajutaksid edasiliikumiseks nooleklahvile. Katse ajal läheb programm pärast hiireklahvi vajutust automaatselt edasi.'&amp;#10;        slider.draw()&amp;#10;    elif int(introCounter) == 5:&amp;#10;        win.mouseVisible = False&amp;#10;        introMSG = 'Olemegi peaaegu valmis alustama...\n\n\&amp;#10;        \nVeel vaid viimane palve. Palun väldi suuremaid liigutusi. Liigutused jätavad EEG signaali palju müra ja see raskendab saadud andmete analüüsi. Päris soolasambaks muutuda me ei palu ja mõned liigutused on katses ka möödapääsmatud (nt klaviatuuriklahvi vajutamine), kuid palume võimalusel asendi kohendamise või teiste suuremate liigutustega oodata pausini. Katses on kokku 9 pausi. Võta endale pausi ajal täpselt nii palju aega, et jaksaksid igas järgmises katseosas rahulikult ülesandele keskenduda.'&amp;#10;    elif int(introCounter) == 6:&amp;#10;        introMSG  = 'Pöördu palun katse läbiviija poole, et mõõtmine käivitada.\n\&amp;#10;        \nInstruktsioon oli küllalt pikk ja on loomulik, kui end veel mõnes katsega seonduvas aspektis ebakindlalt tunned. Aruta seda küsimust julgelt katse läbiviijaga, sest see tõstab potentsiaalselt nii tulevaste andmete kui Sinu katsekogemuse kvaliteeti.'&amp;#10;else:&amp;#10;    introMSG = 'Siit edasi liikudes algab eksperiment.\n\&amp;#10;    \n Alustamiseks vajuta palun: \&quot;g\&quot;'&amp;#10;&amp;#10;if 'g' in keys_resp_i and (introCounter == 0 or introCounter == 6):&amp;#10;    introMSG = ''&amp;#10;    if not counterGo:&amp;#10;        ready = clock.getTime() &amp;#10;        counterGo = counterGo + 1&amp;#10;        introTextSize = 0.6&amp;#10;        introTxtCol = 'red'&amp;#10;        if int(expInfo[ 'sound' ]):&amp;#10;            efl = sound.Sound(value=&quot;Efl&quot;, secs=0.1) &amp;#10;            g = sound.Sound(value=&quot;G&quot;, secs=0.1) &amp;#10;            g.play()&amp;#10;            efl.play()&amp;#10;            continueRoutine =  False&amp;#10;elif 'left' in keys_resp_i and introCounter &gt; 0:&amp;#10;    introCounter -= 1&amp;#10;    introFrex = low_freq&amp;#10;    if int(expInfo[ 'sound' ]):&amp;#10;        c = sound.Sound(value=&quot;C&quot;, secs=0.1) &amp;#10;        c.play()&amp;#10;elif 'right' in keys_resp_i and introCounter &lt; 6:&amp;#10;    introCounter +=  1&amp;#10;    introFrex = low_freq&amp;#10;    core.wait(0.2)&amp;#10;    if int(expInfo[ 'sound' ]):&amp;#10;        g = sound.Sound(value=&quot;A&quot;, secs=0.1)&amp;#10;        g.play()&amp;#10;elif 'p' in keys_resp_i:&amp;#10;    introVol=0&amp;#10;elif key_resp_intro.keys == 'up' and (int(introCounter) == 2 or int(introCounter) == 1):&amp;#10;    gabors.colors=stimCol&amp;#10;    gabors.contrs=contIntroBlip&amp;#10;    gabors.draw()&amp;#10;elif key_resp_intro.keys == 'down' and (int(introCounter) == 2 or int(introCounter) == 1):&amp;#10;    gabors.colors=stimCol&amp;#10;    gabors.contrs=contIntro&amp;#10;    gabors.draw()&amp;#10;elif (int(introCounter) == 2 or int(introCounter) == 1) and 'k' in keys_resp_i:&amp;#10;    introFrex = high_freq&amp;#10;    gabors.colors=stimCol&amp;#10;elif (int(introCounter) == 2 or int(introCounter) == 1) and 'a' in keys_resp_i:&amp;#10;    introFrex = low_freq&amp;#10;    gabors.colors=stimCol&amp;#10;elif 'c' in keys_resp_i and int(introCounter) == 2:&amp;#10;    fill_in = 1&amp;#10;    drawGabors(expInfo,t, frameN,low_freq, high_freq, annulusOri, 'cueText', fill_in,t,t+1)&amp;#10;&amp;#10;if clock.getTime()  &gt; 0.5 and counterGo &lt; 2:&amp;#10;    pressLeft.draw()&amp;#10;    pressRight.draw()&amp;#10;&amp;#10;# change the stimulus colour based on the desired frequency&amp;#10;# where t is time, trial_freq is the frequency&amp;#10;sine = sin(2*pi*(introFrex)*t)&amp;#10;stimCol = [sine,sine,sine]&amp;#10;&amp;#10;sine2 = sin(2*pi*(distrFrex)*t)&amp;#10;stimCol2 = [sine2,sine2,sine2]" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="win.mouseVisible = False&amp;#10;gabors.contrs=conts_default&amp;#10;&amp;#10;expStartTime = core.getTime()&amp;#10;thisExp.addData('Exp time', expStartTime)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_intro">
        <Param name="allowedKeys" updates="constant" val="'left','right', 'p', 'up', 'down', 't', 'k', 'a', 'g','c'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_intro" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_main_intro">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.86" valType="code"/>
        <Param name="name" updates="None" val="text_main_intro" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every frame" val="(0, posYtext)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$introMSG" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="35" valType="code"/>
      </TextComponent>
      <TextComponent name="pageNr">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="pageNr" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -10.5)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$line + str(introCounter) + line" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="stim_s">
      <CodeComponent name="code_stim_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# all the values taken by 'level' will be appended to this variable&amp;#10;contr = []&amp;#10;correctResps = []&amp;#10;intensities = list()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: start stim&amp;#10;&amp;#10;# this sets the trial duration. stim_duration time will be extended&amp;#10;# by lcm_frex and until the maximal duration has reached (~3 s). &amp;#10;stim_duration  = 1 + lcm_frex &amp;#10;stim_duration2 = 1 + lcm_frex &amp;#10;&amp;#10;# write orientations to the file&amp;#10;thisExp.addData('orientation', orients)&amp;#10;&amp;#10;multi = [1, -1]&amp;#10;shuffle(multi)&amp;#10;&amp;#10;# rotate gratings around the center if 'rotate positions' set 1&amp;#10;if int(expInfo[ 'rotate positions' ]) == 1:&amp;#10;    center = [0,0] # relative center&amp;#10;    pos1 = [0,5] # coordinates for the first point&amp;#10;    pos2 = [0,-5] # coordinates for the second point&amp;#10;    pos1m = [center, pos1] # this will be multiplied with the rotation matrix&amp;#10;    pos2m = [center, pos2] # this will be multiplied with the rotation matrix&amp;#10;    angle = randint(45,135) # take random integer from 45 to 135&amp;#10;    theta = np.radians(angle) # convert to radians&amp;#10;    c, s = np.cos(theta), np.sin(theta)&amp;#10;    R = np.array(((c,-s), (s, c))) # rotation matrix&amp;#10;    pos1 = np.matmul(pos1m, R) # multiply first vector with rotation matrix&amp;#10;    pos2 = np.matmul(pos2m, R) # multiply second vector with rotation matrix&amp;#10;    gabors.xys = [pos1[1], pos2[1]] # extract x and y and update the gratings&amp;#10;    if angle &lt; 90:&amp;#10;        angle2 = randint(30,60)+angle&amp;#10;    else:&amp;#10;        angle2 = randint(-60,-30)+angle&amp;#10;#    theta2 = theta + pi/3 * multi[0]&amp;#10;    theta2 = np.radians(angle2)&amp;#10;    c2, s2 = np.cos(theta2), np.sin(theta2)&amp;#10;    R2 = np.array(((c2,-s2), (s2, c2))) # rotation matrix&amp;#10;    pos12 = np.matmul(pos1m, R2) # multiply first vector with rotation matrix&amp;#10;    pos22 = np.matmul(pos2m, R2) # multiply second vector with rotation matrix&amp;#10;    distractors.xys = [pos12[1], pos22[1]] # [(0, 5), (0, -5)] # &amp;#10;&amp;#10;# opacities&amp;#10;delta = level&amp;#10;intensities.append(level)&amp;#10;cont2 = cont1 + delta # opa1 is defined in ITI code component (see Begin Experiment) &amp;#10;conts = [cont1, cont2]&amp;#10;shuffle(conts)&amp;#10;&amp;#10;# save the angle of the  target position to the file&amp;#10;if conts[0] == cont1:&amp;#10;    targetAngle = 180+angle&amp;#10;else:&amp;#10;    targetAngle = angle&amp;#10;&amp;#10;thisExp.addData('target angle', targetAngle)&amp;#10;thisExp.addData('trial_freq', trial_freq)&amp;#10;&amp;#10;# make the target gabors look the same at the beginning&amp;#10;gabors.contrs= conts_default &amp;#10;&amp;#10;# get information about the correct key&amp;#10;if conts[0] &lt; conts[1]:&amp;#10;    corrKey = 'left'&amp;#10;    thisExp.addData('corrKey', 'left')&amp;#10;else:&amp;#10;    corrKey = 'right'&amp;#10;    thisExp.addData('corrKey', 'right')&amp;#10;&amp;#10;# changeT defines the blip duration in screen frames from sixt of a&amp;#10;# screen refresh rate to whole (0.2-1s from the start of the presentation)&amp;#10;changeT = random()+1/6# randint(srate/6,srate)&amp;#10;&amp;#10;# updating the orientations and opacities in target gabors&amp;#10;gabors.oris = orients&amp;#10;# distractors&amp;#10;distractors.oris = orients&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 0&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = 0&amp;#10;#print('stim')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 &amp;#10;soundNotPlayed = 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;# Tartu&amp;#10;&amp;#10;# change the trigger RGB based on if the response is recorded or not&amp;#10;# and if it was correct or not&amp;#10;if not resp_stim_staires.keys:&amp;#10;# TRIGGER: start stim&amp;#10;    trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['stimStart']&amp;#10;    sendTrigger(t, trigN, expInfo['EEG'])&amp;#10;else:&amp;#10;# TRIGGER: response&amp;#10;    if soundNotPlayed:&amp;#10;            startTime = t&amp;#10;    if resp_stim_staires.corr:&amp;#10;        trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['respCorr']&amp;#10;        sendTrigger(t-startTime, trigN, expInfo['EEG'])&amp;#10;        if soundNotPlayed and int(expInfo[ 'sound' ]):&amp;#10;            g = sound.Sound(value=&quot;A&quot;, secs=0.1)&amp;#10;            g.play()&amp;#10;            soundNotPlayed = 0&amp;#10;    elif not resp_stim_staires.corr:&amp;#10;        trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['respInCorr']&amp;#10;        sendTrigger(t-startTime, trigN, expInfo['EEG'])&amp;#10;        if soundNotPlayed and int(expInfo[ 'sound' ]):&amp;#10;            c = sound.Sound(value=&quot;C&quot;, secs=0.1) &amp;#10;            c.play()&amp;#10;            soundNotPlayed = 0&amp;#10;&amp;#10;# keep looming for the duration of stim_duration2&amp;#10;if int(expInfo[ 'looming fixation' ]):&amp;#10;    if t &lt; stim_duration2:&amp;#10;        fixSizeStim = (fixSize[0]+t/16, fixSize[1]+t/16)&amp;#10;else:&amp;#10;    fixSizeStim = (0.3, 0.3)&amp;#10;&amp;#10;# change the stimulus colour based on the desired frequency&amp;#10;# where t is time, trial_freq is the frequency&amp;#10;sine = sin(2*pi*(trial_freq)*t)&amp;#10;stimCol = [sine,sine,sine]&amp;#10;&amp;#10;# distractors&amp;#10;sine_d = sin(2*pi*(dist_freq)*t)&amp;#10;stimCol_d = [sine_d,sine_d,sine_d]&amp;#10;&amp;#10;&amp;#10;# extend the duration by lcm until the response or the maximal duration has reached (~3 s) &amp;#10;if not resp_stim_staires.keys and frameN &gt;= stim_duration and stim_duration &lt; (lcm_frex*6):&amp;#10;    stim_duration  = stim_duration+lcm_frex&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t,frameN, low_freq, high_freq, annulusOri,cueText, fliCue,0,stim_duration)&amp;#10;&amp;#10;# update gratings&amp;#10;if t &lt; stim_duration2:&amp;#10;    gabors.colors=stimCol&amp;#10;    distractors.colors=stimCol_d&amp;#10;    distractors.contrs=conts_default&amp;#10;##### make the blip happen&amp;#10;    if changeT &lt;= t &lt;= changeT+0.2: #&amp;#10;        gabors.contrs=conts&amp;#10;    else:&amp;#10;        gabors.contrs=conts_default&amp;#10;    gabors.draw()&amp;#10;    distractors.draw()&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('stim refR', refR) # write average srate to the file&amp;#10;&amp;#10;# convert responses to 0 and 1 values, and write to the file&amp;#10;&amp;#10;if resp_stim_staires.keys == 'right':&amp;#10;    whichResponse = 1&amp;#10;elif resp_stim_staires.keys == 'left':&amp;#10;    whichResponse = 0&amp;#10;else:&amp;#10;    whichResponse = 'No response'&amp;#10;&amp;#10;# write to the file (changeT == time at which the blip happened)&amp;#10;thisExp.addData('whichResponse', whichResponse)&amp;#10;thisExp.addData('changeT', changeT)&amp;#10;&amp;#10;# save the RT taking blip time into accountt&amp;#10;if not resp_stim_staires.keys:&amp;#10;    thisExp.addData('trueRT', 'no response')&amp;#10;else:&amp;#10;    thisExp.addData('trueRT', resp_stim_staires.rt-changeT)&amp;#10;&amp;#10;# keep all the levels used in the staircase&amp;#10;contr.append(level)&amp;#10;correctResps.append(resp_stim_staires.corr)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_stim_2" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="resp_stim_staires">
        <Param name="allowedKeys" updates="set every repeat" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrKey" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1.5" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="resp_stim_staires" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="stim_duration" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <PolygonComponent name="fix_stim_2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1.5" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.25,0.25,0.25]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="fix_stim_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="set every frame" val="fixSizeStim" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="stim_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
    </Routine>
    <Routine name="cue_s">
      <CodeComponent name="code_cfi_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import math" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;# shuffle prediction time durations&amp;#10;# shuffle(pred_durs)&amp;#10;pred_duration = pred_durs[0]&amp;#10;# prepare the frequency information for this trial (based on the values defined&amp;#10;# in the previous loop)&amp;#10;if frex == 'high':&amp;#10;    trial_freq = high_freq&amp;#10;    dist_freq = low_freq&amp;#10;elif frex == 'low':&amp;#10;    trial_freq = low_freq&amp;#10;    dist_freq = high_freq&amp;#10;&amp;#10;# write into the file&amp;#10;thisExp.addData('cue', cueText) # cue name&amp;#10;&amp;#10;# trig Tartu&amp;#10;&amp;#10;trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['cue']&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 1&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = 0&amp;#10;#print('cue')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;&amp;#10;# Tartu&amp;#10;sendTrigger(t, trigN, expInfo['EEG'])&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t,frameN, low_freq, high_freq, annulusOri, cueText, fliCue,0,cueDur) # t1&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;&amp;#10;thisExp.addData('cue refR', refR) # write average srate to the file&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_cfi_2" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="white_ellips_cfi_2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="2" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0.8,0.8,0.8]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="white_ellips_cfi_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(4.5,1.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="cueDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <TextComponent name="cue_txt_cfi_2">
        <Param name="color" updates="constant" val="$[0.75,0.75,0.75]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="2" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="cue_txt_cfi_2" valType="code"/>
        <Param name="opacity" updates="set every frame" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="cueDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$cueText" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="fb">
      <CodeComponent name="setMsg_fb">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="corr = [] # crashes if not defined in the beginning&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: feedback start&amp;#10;triggers(expInfo, cueText, 4,0)&amp;#10;&amp;#10;incent = ' '&amp;#10;&amp;#10;# create msg for text element according to whether resp.corr is 1 or 0&amp;#10;if not resp_stim.keys:&amp;#10;    msg = &quot;X&quot;&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;elif resp_stim.rt-changeT/srate &lt; 0:&amp;#10;    msg = 'X'&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;elif resp_stim.corr:&amp;#10;    msg =  &quot;{:.2f} s&quot;.format(resp_stim.rt-changeT/srate)&amp;#10;    msgColour = 'green'&amp;#10;    raffleIncent = True&amp;#10;else:&amp;#10;    msg = &quot;{:.2f} s&quot;.format(resp_stim.rt-changeT/srate)&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;&amp;#10;# add or subtract rewards&amp;#10;if raffleIncent and random() &lt; 0.25:&amp;#10;    incent = randint(1,20)&amp;#10;    incentSum = incentSum + incent&amp;#10;    incent = &quot;+&quot; + str(incent)&amp;#10;    incentOpa = 1&amp;#10;    incentCol = [0.5,0.5,-1]&amp;#10;elif not raffleIncent and random() &lt; 0.25:&amp;#10;    incent = randint(1,20)*-1&amp;#10;    incentSum = incentSum + incent&amp;#10;    incent = str(incent)&amp;#10;    incentOpa = 1&amp;#10;    incentCol = [0,0.5,1]&amp;#10;else:&amp;#10;    incentOpa = 1&amp;#10;&amp;#10;&amp;#10;thisExp.addData('incentive', incent)&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 0&amp;#10;&amp;#10;# timing tests&amp;#10;lastT = t &amp;#10;#print('fb')&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;# TRIGGER: feedback start (show on screen)&amp;#10;triggers(expInfo, cueText, 4,0)&amp;#10;&amp;#10;# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN, low_freq, high_freq, annulusOri, cueText, fliCue,0,fbDur)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('fb refR', refR) # write average srate to the file" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="setMsg_fb" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="ellips_fb">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0.8,0.8,0.8]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="ellips_fb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(3, 1.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="srate" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <TextComponent name="text_fb">
        <Param name="color" updates="set every repeat" val="$msgColour" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.8" valType="code"/>
        <Param name="name" updates="None" val="text_fb" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="srate" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="20" valType="code"/>
      </TextComponent>
      <TextComponent name="incent_fb">
        <Param name="color" updates="set every repeat" val="$incentCol" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.8" valType="code"/>
        <Param name="name" updates="None" val="incent_fb" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="incentOpa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="fbDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$incent" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="pause_s">
      <CodeComponent name="code_pause_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# deleted from text_pause_2&amp;#10;# $pauseTxt + str(int(np.mean(correctResps)*100)) + str(' %') + pauseTxt2 + str(timeLeft) + str(' minutit')&amp;#10;&amp;#10;pauseCounter = 0&amp;#10;&amp;#10;pauseMsg = ' '&amp;#10;&amp;#10;pauseMsgText = visual.TextStim(win, pauseMsg,&amp;#10;pos=(0, -5.5), units='deg',color=[1,1,1], height = 1, &amp;#10;bold=False, colorSpace='rgb', italic = True, wrapWidth=35)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if int(expInfo[ 'EEG' ]):&amp;#10;    port.setData(0)&amp;#10;&amp;#10;# trig Tartu&amp;#10;trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['pause']&amp;#10;&amp;#10;&amp;#10;if trialCounter &gt; 32:&amp;#10;# only pause for a rest on every 30th trial: &amp;#10;    if  trialCounter %  30  !=  0: # &amp;#10;        continueRoutine =  False # so don’t run the pause routine this time.&amp;#10;        resetScore = False&amp;#10;    else:&amp;#10;        pauseCounter = pauseCounter + 1&amp;#10;        resetScore = True&amp;#10;        efl = sound.Sound(value=&quot;Efl&quot;, secs=0.1) &amp;#10;        g = sound.Sound(value=&quot;G&quot;, secs=0.1) &amp;#10;        g.play()&amp;#10;        efl.play()&amp;#10;else:&amp;#10;    continueRoutine =  False&amp;#10;    resetScore = False&amp;#10;&amp;#10;&amp;#10;pauseTxt = 'See on paus. Jätkamiseks vajuta palun nooleklahvi...\n'&amp;#10;&amp;#10;soundNotPlayed = 1&amp;#10;currentTime = core.getTime()&amp;#10;timePassed = currentTime - expStartTime&amp;#10;&amp;#10;trialRatio = stairesN*4/(trialCounter) # thisN+1&amp;#10;expDuration = trialRatio * timePassed&amp;#10;timeLeft = round((expDuration - timePassed)/60)&amp;#10;&amp;#10;if trialCounter &gt; 120:&amp;#10;    pauseTxt2 = '\n\nHinnanguliselt on katse lõpuni jäänud veel umbes ' + str(timeLeft) + ' minutit.'&amp;#10;else:&amp;#10;    pauseTxt2 = ''&amp;#10;    timeLeft = ''&amp;#10;&amp;#10;if pauseCounter == 1:&amp;#10;    expDuration += 3&amp;#10;&amp;#10;if pauseCounter % 2 == 0 and trialCounter &gt; 32:&amp;#10;    pausTxt1 = 'Pane tähele, et programm korrigeerib muudatuse nähtavust Sinu sooritusele võimalikult optimaalseks. See on vajalik selleks, et katse tüütavalt lihtsaks ei muutuks ja muudatusele eelneval tähelepanu suunamisel oleks ruumi toimet avaldada. On loomulik, kui tajud, et katse edenedes korrektsete vastuste osakaal justkui kahaneks. See tuleneb sellest, et Sinu eelnevalt antud vastused andsid programmile signaali, et oled juba valmis järgmisele raskusastmele edasi liikuma. \n\n Võib tekkida kiusatus hakata uusi strateegiaid proovima, kuid proovi mitte lasta end uuele raskusastmele liikumisest mõjutada ja jätka samas vaimus, sest tegelikult viitab katse keerukuse kasv, et Sinu võime muudatust avastada on kasvanud :) \n\n' &amp;#10;else:&amp;#10;    pausTxt1 = ''&amp;#10;&amp;#10;#if trialCounter &gt; 59 and pauseCounter % 3 == 0:&amp;#10;#    pChange = round(np.median(intensities[-60:-31])/np.median(intensities[-30:])*100)&amp;#10;#    if pChange &gt; 100:&amp;#10;#        pChange = 100-pChange&amp;#10;#&amp;#10;#    sensiTxt = 'Sinu võime seda tüüpi muutust tuvastada kasvas viimase katseosa jooksul umbes ' + str(pChange) +'%-i.'&amp;#10;#else:&amp;#10;#    sensiTxt = ''" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Tartu&amp;#10;sendTrigger(t, trigN, expInfo['EEG'])&amp;#10;&amp;#10;if int(pauseCounter) == 10:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;\nThe first recording of a human electroencephalography is often attributed to a German psychiatrist Hans Berger, around 1920s. He is also well known for his discovery of the alpha wave or sometimes called \&quot;Berger wave\&quot;. What is less known, is how he got involved with EEG in the first place. To be continued...'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 20:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThe story goes that Hans Berger got interested in EEG because he believed to have experienced spontaneous telepathy with her sister. He reasoned that if it was truly telepathy, recording the electrical activity of the brain might help to bring light to the mechanisms of it. Maybe this belief is to be blamed or something else, but his recordings of the alpha wave were left relatively unnoticed by other investigators for another decade or so. To be continued...'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 30:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nHans Berger\'s work was later picked up by English investigator, Edgar Douglas Adrian, who was awarded for the Nobel prize with another investigator Sir Charles Sherrington, for their discoveries regarding the functions of neurons. One of the things that they investigated was all-or-nothing principle in the nerve cells.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 40:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThe same guy, Edgar Douglas Adrian, who replicated Hans Berger\'s findings, was also involved in another matter close to the hearts of the researchers involved in the current experiment. He described something that in today\'s terms would be called \&quot;steady-state visual evoked potentials\&quot;, which is a fancy term used to describe brains frequency specific response to a visual flicker.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 50:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nResearchers are using the Fourier transformation to analyse brain responses to the flickering stimuli, but also in more standard filtering. This method dates back to 19th century French mathematician, Jean-Baptiste Joseph Fourier. He came up with an idea that any signal could be represented as a collection of sinusoidal waves without losing any information. Or another way to think of it is that Fourier transformasion tells you what frequencies are present in your signal and in what proportions.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 60:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nFourier transformation, that at the time of Jean-Baptiste, attracted attention by few mathematics enthusiasts, is now widely used method for analysing signals across the disciplines, sprinkling from genetics to quantum mechanics, but has also found it\'s way into practical applications and gadgets that we use every day.'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 70:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nThere are a huge number of nerve cells in the brain. According to best of our estimates, this number is around 86 billion (give or take 8 billion). It is often said, to bring that number into perspective, that this is about the same as the number of the stars in the Milky Way galaxy. Latest estimates taught us, that there might be up to 400 billion stars in our galaxy. So lets try to update the popular statement. There are up to as many stars in the Milky Way galaxy as there are nerve cells in the brains of you and your three friends combined. Sounds catchy, doesn\'t it? If you did the math, you found that there is a little miscalculation. I\'d take it as a compliment :)'&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;elif int(pauseCounter) == 80:&amp;#10;    pauseMsg = 'Did you know?\n\n\&amp;#10;    \nWelcome to the department of psychology at the University of York! The department holds it\'s roots in the year 1974 when Founding Head of Department Peter Venables appointed the first lecturers. He helped to pioneer the application of physiological measures to psychological problems, paving the way into the top class research in biological basis of psychology and behaviour. '&amp;#10;    pauseMsgText.setText(pauseMsg)&amp;#10;    pauseMsgText.draw()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if resetScore:&amp;#10;    correctResps = []" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_pause_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_pause_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="text_pause_2" valType="code"/>
        <Param name="opacity" updates="set every frame" val="t" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$pauseTxt + pausTxt1 + pauseTxt2" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="35" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="any_key_end_pause_2">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="any_key_end_pause_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="cue">
      <CodeComponent name="code_cfi">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# this loop will take values from exp_trials list based on the&amp;#10;# trial number and assigns it to the corresponding task condition.&amp;#10;if exp_trials[trials.thisN] == 1: &amp;#10;    frex = 'high'&amp;#10;    cueText = 'fast'&amp;#10;    delta = delta_high[count_fast]&amp;#10;    pred_duration = pred_durs_high[count_fast]&amp;#10;    count_fast = count_fast +1&amp;#10;elif exp_trials[trials.thisN] == 2: &amp;#10;    frex = 'low'&amp;#10;    cueText = 'slow'&amp;#10;    delta = delta_low[count_slow]&amp;#10;    pred_duration = pred_durs_low[count_slow]&amp;#10;    count_slow = count_slow +1&amp;#10;elif exp_trials[trials.thisN] == 3:&amp;#10;    frex = 'high'&amp;#10;    cueText = '?'&amp;#10;    delta = delta_high_rnd[count_fast_rnd]&amp;#10;    pred_duration = pred_durs_high_rnd[count_fast_rnd]&amp;#10;    count_fast_rnd= count_fast_rnd +1&amp;#10;elif exp_trials[trials.thisN] == 4:&amp;#10;    frex = 'low'&amp;#10;    cueText = '?'&amp;#10;    delta = delta_low_rnd[count_slow_rnd]&amp;#10;    pred_duration = pred_durs_low_rnd[count_slow_rnd]&amp;#10;    count_slow_rnd = count_slow_rnd +1&amp;#10;else:&amp;#10;    msg = ['Something went wrong']&amp;#10;&amp;#10;#  this value will be read by the drawGabors() function and enables fill-in cue presentation if set to 1&amp;#10;fliCue = 1&amp;#10;# TRIGGER: start cue&amp;#10;triggers(expInfo, cueText, 1,0)&amp;#10;&amp;#10;thisExp.addData('cue', cueText)&amp;#10;thisExp.addData('stage', 'experiment')&amp;#10;thisExp.addData('pred_dur', pred_duration)&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = t &amp;#10;#print('cue')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum += frameDuration&amp;#10;&amp;#10;#timing tests&amp;#10;&amp;#10;# TRIGGER: start cue (show on screen)&amp;#10;# triggers(expInfo, cueText, 1,0)&amp;#10;&amp;#10;# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN, low_freq, high_freq, annulusOri,cueText, fliCue,0,cueDur)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('cue refR', refR) # write average srate to the file" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_cfi" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="white_ellips_cfi">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0.8,0.8,0.8]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="white_ellips_cfi" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(3,1.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="cueDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <TextComponent name="cue_txt_cfi">
        <Param name="color" updates="constant" val="$[0.75,0.75,0.75]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="cue_txt_cfi" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="cueDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$cueText" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="stim">
      <CodeComponent name="code_stim">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;correctResps = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: start stim&amp;#10;triggers(expInfo, cueText, 3,0)&amp;#10;&amp;#10;# this sets the trial duration. stim_duration time will be extended&amp;#10;# by lcm_frex and until the maximal duration has reached (3 s). &amp;#10;stim_duration  = srate + lcm_frex&amp;#10;stim_duration2 = srate + lcm_frex &amp;#10;&amp;#10;&amp;#10;# write to the file (delta value in percentage change)&amp;#10;deltaP = deltaPercent[delta_orig.index(delta)]&amp;#10;thisExp.addData('delta percent', deltaP)&amp;#10;&amp;#10;# set the random orientation for the gratings&amp;#10;thisExp.addData('orientation', orients)&amp;#10;# rotate gratings around the center if 'rotate positions' set 1&amp;#10;if int(expInfo[ 'rotate positions' ]) == 1:&amp;#10;    center = [0,0] # relative center&amp;#10;    pos1 = [0,5] # coordinates for the first point&amp;#10;    pos2 = [0,-5] # coordinates for the second point&amp;#10;    pos1m = [center, pos1] # this will be multiplied with the rotation matrix&amp;#10;    pos2m = [center, pos2] # this will be multiplied with the rotation matrix&amp;#10;    angle = randint(45,135) # take random integer from 1 to 360&amp;#10;    theta = np.radians(angle) # convert to radians&amp;#10;    c, s = np.cos(theta), np.sin(theta)&amp;#10;    R = np.array(((c,-s), (s, c))) # rotation matrix&amp;#10;    pos1 = np.matmul(pos1m, R) # multiply first vector with rotation matrix&amp;#10;    pos2 = np.matmul(pos2m, R) # multiply second vector with rotation matrix&amp;#10;    gabors.xys = [pos1[1], pos2[1]] # extract x and y and update the gratings&amp;#10;&amp;#10;# opacities&amp;#10;opa2 = opa1 + delta # opa1 is defined in ITI code component (see Begin Experiment) &amp;#10;opas = [opa1, opa2]&amp;#10;shuffle(opas)&amp;#10;&amp;#10;thisExp.addData('delta', delta)&amp;#10;&amp;#10;# save the angle of the  target position to the file&amp;#10;if opas[0] == opa1:&amp;#10;    targetAngle = 180+angle&amp;#10;else:&amp;#10;    targetAngle = angle&amp;#10;&amp;#10;thisExp.addData('target angle', targetAngle)&amp;#10;&amp;#10;# prepare the frequency information for this trial&amp;#10;if frex == 'high':&amp;#10;    trial_freq = high_freq&amp;#10;elif frex == 'low':&amp;#10;    trial_freq = low_freq&amp;#10;elif frex == 'no':&amp;#10;    trial_freq = srate&amp;#10;&amp;#10;thisExp.addData('trial_freq', trial_freq)&amp;#10;&amp;#10;# define the correct keys for this trial&amp;#10;gabors.opacities= opas_default # make them look different from the beginning&amp;#10;if opas[0] &lt; opas[1]:&amp;#10;    corrKey = 'left'&amp;#10;    thisExp.addData('corrKey', 'left')&amp;#10;else:&amp;#10;    corrKey = 'right'&amp;#10;    thisExp.addData('corrKey', 'right')&amp;#10;&amp;#10;&amp;#10;# changeT defines the blip duration in screen frames from sixt of a&amp;#10;# screen refresh rate to double (0.2-2s from the start of the presentation)&amp;#10;changeT = randint(srate/6,srate) # no need for this&amp;#10;&amp;#10;# updating the orientations and opacities&amp;#10;gabors.oris = orients&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 0&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = t &amp;#10;#print('stim')&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 &amp;#10;soundNotPlayed = 1" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;#print(frameDuration)&amp;#10;&amp;#10;# change the trigger RGB based on if the response is recorded or not&amp;#10;# and if it was correct or not&amp;#10;if not resp_stim.keys:&amp;#10;# TRIGGER: start stim&amp;#10;    triggers(expInfo, cueText, 3,0)&amp;#10;else:&amp;#10;# TRIGGER: response&amp;#10;    if resp_stim.corr:&amp;#10;        triggers(expInfo, cueText, 3,1)&amp;#10;        if soundNotPlayed:&amp;#10;            c = sound.Sound(value=&quot;C&quot;, secs=0.1,volume = vol, hamming = True)&amp;#10;            c.play()&amp;#10;            soundNotPlayed = 0&amp;#10;    elif not resp_stim.corr:&amp;#10;        triggers(expInfo, cueText, 4,1)&amp;#10;        if soundNotPlayed:&amp;#10;            g = sound.Sound(value=&quot;G&quot;, secs=0.1, volume = vol, hamming = True) &amp;#10;            g.play()&amp;#10;            soundNotPlayed = 0&amp;#10;&amp;#10;# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;if int(expInfo[ 'looming fixation' ]):&amp;#10;    if t &lt; stim_duration2/srate:&amp;#10;        fixSizeStim = (fixSize[0]+t/8, fixSize[1]+t/8)&amp;#10;else:&amp;#10;    fixSizeStim = (0.3, 0.3)&amp;#10;&amp;#10;# change the stimulus colour based on the desired frequency&amp;#10;# where t is time, trial_freq is the frequency&amp;#10;sine = sin(2*pi*(trial_freq)*t)&amp;#10;stimCol = [sine,sine,sine]&amp;#10;&amp;#10;# make the blip happen&amp;#10;if changeT &lt;= frameN &lt;= changeT+srate*0.2:&amp;#10;    gabors.opacities=opas&amp;#10;else:&amp;#10;    gabors.opacities=opas_default&amp;#10;&amp;#10;# extend the duration by lcm until the response or the maximal duration has reached (3 s) &amp;#10;if not resp_stim.keys and frameN &gt;= stim_duration and stim_duration &lt; lcm_frex*6:&amp;#10;    stim_duration  = stim_duration+lcm_frex&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN, low_freq, high_freq, annulusOri, cueText, fliCue,0,stim_duration)&amp;#10;&amp;#10;# update gratings&amp;#10;if frameN &lt; stim_duration2:&amp;#10;    gabors.colors=stimCol&amp;#10;    gabors.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('stim refR', refR) # write average srate to the file&amp;#10;&amp;#10;# convert responses to 0 and 1 values, and write to the file&amp;#10;&amp;#10;if resp_stim.keys == 'right':&amp;#10;    whichResponse = 1&amp;#10;elif resp_stim.keys == 'left':&amp;#10;    whichResponse = 0&amp;#10;else:&amp;#10;    whichResponse = 'No response'&amp;#10;&amp;#10;# write to the file (changeT == time at which the blip happened)&amp;#10;thisExp.addData('whichResponse', whichResponse)&amp;#10;thisExp.addData('changeT', changeT)&amp;#10;&amp;#10;# save the RT taking blip time into accountt&amp;#10;if not resp_stim.keys:&amp;#10;    thisExp.addData('trueRT', 'no response')&amp;#10;else:&amp;#10;    thisExp.addData('trueRT', resp_stim.rt-changeT/srate)&amp;#10;&amp;#10;correctResps.append(resp_stim.corr)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_stim" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="resp_stim">
        <Param name="allowedKeys" updates="set every repeat" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrKey" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1.5" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="resp_stim" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="stim_duration" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <PolygonComponent name="fix_stim">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1.5" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="fix_stim" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="set every frame" val="fixSizeStim" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="stim_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
    </Routine>
    <Routine name="block_intro">
      <CodeComponent name="intro_code_block">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Present text at the beginning of each block&amp;#10;if int(trials.thisN) == 0 and conditions == 'conditions3_vs_training':&amp;#10;    continueRoutine = True &amp;#10;    intro_txt = 'Training introduction. Press any key to continue...'&amp;#10;elif int(trials.thisN) == 0 and conditions == 'conditions3_vs':&amp;#10;    intro_txt = 'Now starts the eperiment. Press any key to continue...'&amp;#10;    continueRoutine = True &amp;#10;else:&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="intro_code_block" valType="code"/>
      </CodeComponent>
      <TextComponent name="intro_text_block">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="intro_text_block" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$intro_txt" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="any_key_end_block">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="any_key_end_block" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="fb_s">
      <CodeComponent name="setMsg_fb_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# all the values taken by 'level' will be appended to this variable&amp;#10;contr = []&amp;#10;&amp;#10;incentCol = [0,0,0]&amp;#10;&amp;#10;# variables use to keep track of incentives&amp;#10;incentOpa = 0&amp;#10;incentSum = 0&amp;#10;incent = 0&amp;#10;incents = 0&amp;#10;incentCounter = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: feedback start&amp;#10;triggers(expInfo, cueText, 4,0)&amp;#10;incent = ' '&amp;#10;&amp;#10;# create msg for text element according to whether resp.corr is 1 or 0&amp;#10;if not resp_stim_staires.keys:&amp;#10;    msg = &quot;X&quot;&amp;#10;    msg = stim_duration&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;elif resp_stim_staires.rt-changeT/srate &lt; 0:&amp;#10;    msg = 'X'&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;elif resp_stim_staires.corr:&amp;#10;    msg =  &quot;{:.2f} s&quot;.format(resp_stim_staires.rt-changeT/srate) &amp;#10;    msgColour = 'green'&amp;#10;    raffleIncent = True&amp;#10;    incentCounter = incentCounter + 1&amp;#10;else:&amp;#10;    msg = &quot;{:.2f} s&quot;.format(resp_stim_staires.rt-changeT/srate)&amp;#10;    msgColour = 'red'&amp;#10;    raffleIncent = False&amp;#10;&amp;#10;# add or subtract rewards&amp;#10;if raffleIncent and random() &lt; 0.25:&amp;#10;    incent = randint(1,20)&amp;#10;    incentSum = incentSum + incent&amp;#10;    incent = &quot;+&quot; + str(incent)&amp;#10;    incentOpa = 1&amp;#10;    incentCol = [0.5,0.5,-1]&amp;#10;elif not raffleIncent and random() &lt; 0.25:&amp;#10;    incent = randint(1,20)*-1&amp;#10;    incentSum = incentSum + incent&amp;#10;    incent = str(incent)&amp;#10;    incentOpa = 1&amp;#10;    incentCol = [0,0.5,1]&amp;#10;else:&amp;#10;    incentOpa = 1&amp;#10;&amp;#10;# write to the file&amp;#10;thisExp.addData('incentive', incent)&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;filCue = 0&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = t &amp;#10;#print('fb')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 &amp;#10;&amp;#10;soundPresented = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;# TRIGGER: feedback start (show on screen)&amp;#10;triggers(expInfo, cueText, 4,0)&amp;#10;&amp;#10;# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t,frameN, low_freq, high_freq, annulusOri, cueText, fliCue,0,fbDur)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('fb refR', refR) # write average srate to the file&amp;#10;&amp;#10;# keep all the levels used in the staircase&amp;#10;contr.append(level)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="setMsg_fb_2" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="white_ellips_fb_2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.1,0.1,0.1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0.8,0.8,0.8]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="99" valType="int"/>
        <Param name="name" updates="None" val="white_ellips_fb_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(3,1.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="cueDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <TextComponent name="text_fb_2">
        <Param name="color" updates="set every repeat" val="$msgColour" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.8" valType="code"/>
        <Param name="name" updates="None" val="text_fb_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="fbDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="20" valType="code"/>
      </TextComponent>
      <TextComponent name="incentAdd">
        <Param name="color" updates="set every repeat" val="$incentCol" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="1" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.8" valType="code"/>
        <Param name="name" updates="None" val="incentAdd" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="incentOpa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="fbDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$incent" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="bye">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# trigger ??? is bye&amp;#10;#trigRGB = [rgbValsRed[3], rgbValsGreen[3], 0]&amp;#10;#msgTrigger = '???'&amp;#10;#trigger.fillColor = trigRGB&amp;#10;&amp;#10;# &amp;#10;pChange = round(np.median(intensities[-41:])/np.median(intensities[0:29])*100)&amp;#10;&amp;#10;outroVol = 0&amp;#10;&amp;#10;outroTxt = 'Aitäh! Jäänud on veel vaid üks lühike katseosa. Sinu võime seda tüüpi muutust tuvastada kasvas selle katse jooksul umbes ' + str(pChange) +'%-i.'&amp;#10;expEndTime = core.getTime()&amp;#10;thisExp.addData('Exp time', expEndTime)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# draw/send the trigger&amp;#10;#if int(expInfo[ 'eeg' ]):&amp;#10;#    trigger.draw()" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="core.rush(False)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="2" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="set every frame" val="t/2" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every frame" val="(0, cos((t-12)/10)+tan((t-12)/10))" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$outroTxt" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="intro">
      <CodeComponent name="intro_code_int">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import numpy.matlib&amp;#10;&amp;#10;import math" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# trigger 9 will be sent out&amp;#10;trigRGB = [rgbValsCondition[0], rgbValsRoutine[0], rgbValsResp[0]]&amp;#10;msgTrigger = str(trigValOutRed[0]+trigValOutGreen[0]+trigValOutBlue[0])&amp;#10;trigger.fillColor = trigRGB&amp;#10;&amp;#10;# Introduction text that is read by the intro_text component&amp;#10;intro_txt = 'Press any key to continue the experiment...'&amp;#10;&amp;#10;# take the average of last 10 trials&amp;#10;contr = list(dict.fromkeys(contr))&amp;#10;fewLast = sum(contr[-10:])&amp;#10;nResps = len(contr[-10:])&amp;#10;level = fewLast/nResps&amp;#10;&amp;#10;# 0.38&amp;#10;&amp;#10;# define delta for each individual participant&amp;#10;delta = [level*0.8, level*0.9, level, level*1.1, level*1.2, level*1.3]&amp;#10;delta_orig = [level*0.8, level*0.9, level, level*1.1, level*1.15, level*1.2]&amp;#10;deltaPercent = [-20, -10, 0, +10, +20, +30]&amp;#10;&amp;#10;&amp;#10;#delta = [level*0.3, level*0.4, level*0.55, level*0.7, level*0.85, level]&amp;#10;#delta_orig = [level*0.3, level*0.4, level*0.55, level*0.7, level*0.85, level]&amp;#10;#deltaPercent = [-15, 0, 15, 30, 45, 60]&amp;#10;&amp;#10;&amp;#10;&amp;#10;nConds = 4&amp;#10;nLevels = 6&amp;#10;trialsPerCond = 10&amp;#10;nTrials = trialsPerCond*nLevels*nConds &amp;#10;&amp;#10;# don't like this, but I don't know better way at the moment&amp;#10;&amp;#10;delta_low = np.repeat(delta,trialsPerCond)&amp;#10;delta_high = np.repeat(delta,trialsPerCond)&amp;#10;delta_low_rnd = np.repeat(delta,trialsPerCond)&amp;#10;delta_high_rnd = np.repeat(delta,trialsPerCond)&amp;#10;&amp;#10;preDurN = math.ceil(nLevels*trialsPerCond/len(pred_durs))&amp;#10;pred_durs_low = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_high = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_low_rnd = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_high_rnd = np.repeat(pred_durs,preDurN) &amp;#10;&amp;#10;if preDurN*len(pred_durs) &gt; nLevels*trialsPerCond:&amp;#10;    pred_durs_low = pred_durs_low[0:int(nLevels*trialsPerCond)]&amp;#10;    pred_durs_high = pred_durs_high[0:int(nLevels*trialsPerCond)]&amp;#10;    pred_durs_low_rnd = pred_durs_low_rnd[0:int(nLevels*trialsPerCond)]&amp;#10;    pred_durs_high_rnd = pred_durs_high_rnd[0:int(nLevels*trialsPerCond)]&amp;#10;&amp;#10;#pred_durs_low = np.repeat(pred_durs,trialsPerCond)&amp;#10;#pred_durs_high = np.repeat(pred_durs,trialsPerCond)&amp;#10;#pred_durs_low_rnd = np.repeat(pred_durs,trialsPerCond)&amp;#10;#pred_durs_high_rnd = np.repeat(pred_durs,trialsPerCond) &amp;#10;&amp;#10;pred_durs_low = pred_durs_low.tolist()&amp;#10;pred_durs_high = pred_durs_high.tolist()&amp;#10;pred_durs_low_rnd = pred_durs_low_rnd.tolist()&amp;#10;pred_durs_high_rnd = pred_durs_high_rnd.tolist()&amp;#10;&amp;#10;delta_low = delta_low.tolist()&amp;#10;delta_high = delta_high.tolist()&amp;#10;delta_low_rnd = delta_low_rnd.tolist()&amp;#10;delta_high_rnd = delta_high_rnd.tolist()&amp;#10;&amp;#10;shuffle(delta_low)&amp;#10;shuffle(delta_high)&amp;#10;shuffle(delta_low_rnd)&amp;#10;shuffle(delta_high_rnd)&amp;#10;&amp;#10;shuffle(pred_durs_low)&amp;#10;shuffle(pred_durs_high)&amp;#10;shuffle(pred_durs_low_rnd)&amp;#10;shuffle(pred_durs_high_rnd)&amp;#10;&amp;#10;# delta_no = np.matlib.repmat(delta,1,nTrials)&amp;#10;&amp;#10;count_fast = 0&amp;#10;count_slow = 0&amp;#10;count_slow_rnd = 0&amp;#10;count_fast_rnd = 0&amp;#10;&amp;#10;&amp;#10;a = np.ones(math.ceil(trialsPerCond*nLevels))&amp;#10;b = a+1&amp;#10;c = a+2&amp;#10;d = a+3&amp;#10;&amp;#10;&amp;#10;exp_trials = np.concatenate((a,b,c,d))&amp;#10;&amp;#10;shuffle(exp_trials)&amp;#10;&amp;#10;soundNotPlayed = 1&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# draw/send the trigger&amp;#10;if int(expInfo[ 'eeg' ]):&amp;#10;    trigger.draw()&amp;#10;&amp;#10;# incentSum" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="expStartTime = core.getTime()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="intro_code_int" valType="code"/>
      </CodeComponent>
      <TextComponent name="intro_text_int">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="intro_text_int" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$intro_txt" valType="str"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="20" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="any_key_end_int">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="any_key_end_int" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pred_event_s">
      <CodeComponent name="code_prediction_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# just to ensure that the cumulative duration of the prediction time would be &amp;#10;# equal for all the conditions&amp;#10;nq = 4&amp;#10;# prepare q lists&amp;#10;q_low = list([0]*(stairesN-nq))+list([1]*nq)&amp;#10;q_high = list([0]*(stairesN-nq))+list([1]*nq)&amp;#10;q_low_rnd = list([0]*(stairesN-nq))+list([1]*nq)&amp;#10;q_high_rnd = list([0]*(stairesN-nq))+list([1]*nq)&amp;#10;&amp;#10;shuffle(q_low)&amp;#10;shuffle(q_high)&amp;#10;shuffle(q_low_rnd)&amp;#10;shuffle(q_high_rnd)&amp;#10;&amp;#10;preDurN = math.ceil(float(stairesN)/len(pred_durs))&amp;#10;pred_durs_low = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_high = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_low_rnd = np.repeat(pred_durs,preDurN)&amp;#10;pred_durs_high_rnd = np.repeat(pred_durs,preDurN) &amp;#10;&amp;#10;pred_durs_low = pred_durs_low[0:int(stairesN)-5]&amp;#10;pred_durs_high = pred_durs_high[0:int(stairesN)-5]&amp;#10;pred_durs_low_rnd = pred_durs_low_rnd[0:int(stairesN)-5]&amp;#10;pred_durs_high_rnd = pred_durs_high_rnd[0:int(stairesN)-5]&amp;#10;&amp;#10;pred_durs_low = pred_durs_low.tolist()&amp;#10;pred_durs_high = pred_durs_high.tolist()&amp;#10;pred_durs_low_rnd = pred_durs_low_rnd.tolist()&amp;#10;pred_durs_high_rnd = pred_durs_high_rnd.tolist()&amp;#10;&amp;#10;shuffle(pred_durs_low)&amp;#10;shuffle(pred_durs_high)&amp;#10;shuffle(pred_durs_low_rnd)&amp;#10;shuffle(pred_durs_high_rnd)&amp;#10;&amp;#10;training_low = pred_durs[0:5]&amp;#10;shuffle(training_low)&amp;#10;training_high = pred_durs[0:5]&amp;#10;shuffle(training_high)&amp;#10;training_low_rnd = pred_durs[0:5]&amp;#10;shuffle(training_low_rnd)&amp;#10;training_high_rnd = pred_durs[0:5]&amp;#10;shuffle(training_high_rnd)&amp;#10;&amp;#10;training_low.extend(pred_durs_low)&amp;#10;training_high.extend(pred_durs_high)&amp;#10;training_low_rnd.extend(pred_durs_low_rnd)&amp;#10;training_high_rnd.extend(pred_durs_high_rnd)&amp;#10;&amp;#10;pred_durs_low = training_low&amp;#10;pred_durs_high = training_high&amp;#10;pred_durs_low_rnd = training_low_rnd&amp;#10;pred_durs_high_rnd = training_high_rnd&amp;#10;&amp;#10;count_fast = 0&amp;#10;count_slow = 0&amp;#10;count_slow_rnd = 0&amp;#10;count_fast_rnd = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# TRIGGER: start prediction&amp;#10;#triggers(expInfo, cueText, 2,0,0)&amp;#10;&amp;#10;# trig Tartu&amp;#10;&amp;#10;trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['prediction']&amp;#10;&amp;#10;# this value will be read by the drawGabors() function and enables fill-in cue&amp;#10;# presentation if set to 1&amp;#10;fliCue = 0&amp;#10;&amp;#10;# take a random duration from the durations in the pred_durs&amp;#10;# shuffle(pred_durs)&amp;#10;# pred_duration = int(pred_durs[0])&amp;#10;&amp;#10;# this bit is just for timing test&amp;#10;lastT = 0&amp;#10;#print('predict')&amp;#10;&amp;#10;sumOfCount = 0&amp;#10;frameDurSum = 0 &amp;#10;&amp;#10;&amp;#10;# this loop will ensure that the cumulative duration of the prediction time would be &amp;#10;# equal for all the conditions&amp;#10;&amp;#10;if label == 'high':&amp;#10;    pred_duration = pred_durs_high[count_fast]&amp;#10;    presentQ = q_high[count_fast]&amp;#10;    count_fast += 1&amp;#10;elif label == 'low':&amp;#10;    pred_duration = pred_durs_low[count_slow]&amp;#10;    presentQ = q_low[count_slow]&amp;#10;    count_slow += 1&amp;#10;elif label == 'high50':&amp;#10;    pred_duration = pred_durs_high_rnd[count_fast_rnd]&amp;#10;    presentQ = q_high_rnd[count_fast_rnd]&amp;#10;    count_fast_rnd += 1&amp;#10;elif label == 'low50':&amp;#10;    pred_duration = pred_durs_low_rnd[count_slow_rnd]&amp;#10;    presentQ = q_low_rnd[count_slow_rnd]&amp;#10;    count_slow_rnd += 1&amp;#10;else:&amp;#10;    print('Something went wrong with prediction durations')&amp;#10;&amp;#10;thisExp.addData('prediction duration', pred_duration) " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# this bit is just for timing test&amp;#10;frameDuration = t - lastT&amp;#10;lastT = t&amp;#10;sumOfCount += 1&amp;#10;frameDurSum +=  frameDuration&amp;#10;&amp;#10;## TRIGGER&amp;#10;# Tartu&amp;#10;sendTrigger(t, trigN, expInfo['EEG'])&amp;#10;&amp;#10;# draw the prediction time fixation&amp;#10;if int(expInfo[ 'looming fixation' ]):&amp;#10;    fixSize = (t/8, t/8)&amp;#10;else:&amp;#10;    fixSize = (0.3, 0.3)&amp;#10;&amp;#10;# draw the background gabors and fill-in (drawGabors() gets defined in ITI routine)&amp;#10;drawGabors(expInfo,t, frameN, low_freq, high_freq, annulusOri, cueText, fliCue,0,pred_duration) # predictionDur&amp;#10;#" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# this bit is just for timing test&amp;#10;refR = float(sumOfCount)/float(frameDurSum)&amp;#10;#print(refR)&amp;#10;thisExp.addData('prediction refR', refR) # write average srate to the file&amp;#10;thisExp.addData('prediction frameN', sumOfCount)&amp;#10;thisExp.addData('prediction dur', pred_duration)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_prediction_2" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="fix_prediction_2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="2" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0.25,0.25,0.25]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="0" valType="code"/>
        <Param name="nVertices" updates="constant" val="50" valType="int"/>
        <Param name="name" updates="None" val="fix_prediction_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="set every frame" val="fixSize" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="pred_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="deg" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
    </Routine>
    <Routine name="cont_calibration">
      <CodeComponent name="cont_cal">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="juku = 0&amp;#10;&amp;#10;wos = visual.TextStim(win, '',&amp;#10;pos=(0, 0), units='deg',color=introTxtCol, height = 0.6, &amp;#10;bold=False,  colorSpace='rgb')&amp;#10;&amp;#10;mouse = event.Mouse(win=win)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="wheel = mouse.getWheelRel()&amp;#10;&amp;#10;if cont_calib.keys == 'left':&amp;#10;    &amp;#10;    if  wheel[1] and contrasts[1] &lt;= 1 and contrasts[1] &gt;= 0:&amp;#10;        juku = wheel[1]/100&amp;#10;        contrasts = [contrasts[0], contrasts[1]+juku]&amp;#10;        wos.setText(str(round(contrasts[1],2)))&amp;#10;    elif wheel[1] and contrasts[1] &gt; 1:&amp;#10;        contrasts[1] = 1&amp;#10;    elif wheel[1] and contrasts[1] &lt; 0:&amp;#10;        contrasts[1] = 0&amp;#10;elif cont_calib.keys == 'right':&amp;#10;    &amp;#10;    if  wheel[1] and spatialfs &lt;= 3 and spatialfs &gt;= 0:&amp;#10;        juku = wheel[1]/100&amp;#10;        spatialfs = spatialfs+juku&amp;#10;        wos.setText(str(round(spatialfs,2)))&amp;#10;    elif wheel[1] and spatialfs[1] &gt; 3:&amp;#10;        spatialfs[1] = 5&amp;#10;    elif wheel[1] and spatialfs[1] &lt; 0:&amp;#10;        spatialfs[1] = 0&amp;#10;    distractors.sfs = spatialfs&amp;#10;&amp;#10;&amp;#10;wos.draw()&amp;#10;&amp;#10;&amp;#10;# change the stimulus colour based on the desired frequency&amp;#10;# where t is time, trial_freq is the frequency&amp;#10;sineLow = sin(2*pi*(low_freq)*t)&amp;#10;stimColLow = [sineLow,sineLow,sineLow]&amp;#10;&amp;#10;&amp;#10;sineHigh = sin(2*pi*(high_freq)*t)&amp;#10;stimColHigh = [sineHigh,sineHigh,sineHigh]&amp;#10;&amp;#10;calCols = [stimColLow, stimColHigh]&amp;#10;&amp;#10;gabors.colors=calCols[0]&amp;#10;distractors.colors = calCols[1]&amp;#10;gabors.contrs = [contrasts[0], 0]# &amp;#10;distractors.contrs = [0, contrasts[1]]&amp;#10;gabors.draw()&amp;#10;distractors.draw()&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="cont_cal" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="cont_calib">
        <Param name="allowedKeys" updates="constant" val="'space', 'left', 'right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="cont_calib" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="question">
      <CodeComponent name="question_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((! presentQ)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    psychoJS.window.mouseVisible = true;&amp;#10;}&amp;#10;trigN = (((&quot;11&quot; + trigdic[cueText]) + trigdic[frex]) + trigdic[&quot;question&quot;]);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if not presentQ:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    win.mouseVisible = True&amp;#10;&amp;#10;trigN = '11'+ trigdic[cueText] + trigdic[frex] + trigdic['question']" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Tartu&amp;#10;sendTrigger(t, trigN, expInfo['EEG'])" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="sendTrigger(t, trigN, expInfo[&quot;EEG&quot;]);&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="win.mouseVisible = False" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="question_code" valType="code"/>
      </CodeComponent>
      <SliderComponent name="slider">
        <Param name="borderColor" updates="constant" val="Black" valType="color"/>
        <Param name="color" updates="constant" val="Black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="Red" valType="color"/>
        <Param name="flip" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="granularity" updates="constant" val="0" valType="num"/>
        <Param name="initVal" updates="None" val="" valType="code"/>
        <Param name="labels" updates="constant" val="'kindlasti aeglane','?','kindlasti kiire'" valType="list"/>
        <Param name="letterHeight" updates="constant" val="1" valType="num"/>
        <Param name="name" updates="None" val="slider" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.4)" valType="list"/>
        <Param name="readOnly" updates="constant" val="False" valType="bool"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(30, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="styleTweaks" updates="constant" val="()" valType="list"/>
        <Param name="styles" updates="constant" val="slider" valType="str"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="ticks" updates="constant" val="(-100,0,100)" valType="list"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </SliderComponent>
      <TextComponent name="controlQ">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="1" valType="num"/>
        <Param name="name" updates="None" val="controlQ" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 8)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Kontrollküsimus: &amp;#10;&amp;#10;Millist silti kandis viimati esitatud vihje?" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="20" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="main_intro"/>
    <LoopInitiator loopType="MultiStairHandler" name="trials_2">
      <Param name="conditions" updates="None" val="[{'startVal': 0.3, 'startValSd': 0.15, 'pThreshold': 0.7, 'cueText': 'aeglane', 'frex': 'low', 'label': 'low'}, {'startVal': 0.3, 'startValSd': 0.15, 'pThreshold': 0.7, 'cueText': 'kiire', 'frex': 'high', 'label': 'high'}, {'startVal': 0.3, 'startValSd': 0.15, 'pThreshold': 0.7, 'cueText': '?', 'frex': 'low', 'label': 'low50'}, {'startVal': 0.3, 'startValSd': 0.15, 'pThreshold': 0.7, 'cueText': '?', 'frex': 'high', 'label': 'high50'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_quest.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="interleaved staircases" valType="str"/>
      <Param name="nReps" updates="None" val="stairesN" valType="code"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="stairType" updates="None" val="QUEST" valType="str"/>
      <Param name="switchMethod" updates="None" val="random" valType="str"/>
    </LoopInitiator>
    <Routine name="ITI"/>
    <Routine name="cue_s"/>
    <Routine name="pred_event_s"/>
    <Routine name="stim_s"/>
    <Routine name="question"/>
    <Routine name="pause_s"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="bye"/>
  </Flow>
</PsychoPy2experiment>
